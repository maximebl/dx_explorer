import "bindable_base.idl";
import "mesh_vm.idl";

namespace transformations
{
	enum vector_selection
	{
		x = 0,
		y = 1,
		z = 2,
		w = 3
	};

	unsealed runtimeclass mvp_viewmodel : bindable_base
	{
		mvp_viewmodel();

		mesh_vm selected_mesh;
		IObservableVector<IInspectable> meshes{ get; };

		Windows.UI.Xaml.Input.XamlUICommand initialize_app{ get; };
		Windows.UI.Xaml.Input.XamlUICommand cmd_add_lit_cube{ get; };
		Windows.UI.Xaml.Input.XamlUICommand cmd_add_simple_cube{ get; };
		Windows.UI.Xaml.Input.XamlUICommand cmd_delete_mesh{ get; };

		Windows.UI.Xaml.Controls.SwapChainPanel current_swapchain_panel;

		Boolean model_matrix_options_visible;
		Boolean view_matrix_options_visible;
		Boolean projection_matrix_options_visible;
		Boolean viewport_options_visible;
		Boolean transforms_options_visible;

		Single eye_position_x;
		Single eye_position_y;
		Single eye_position_z;
		vector_selection up_direction;
		vector_selection focus_point;

		Single field_of_view;
		Single near_z;
		Single far_z;

		Single viewport_width;
		Single viewport_height;
		Single scissor_rect_width;
		Single scissor_rect_height;

	}
}
